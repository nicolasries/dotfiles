#+TITLE: Configuration
* Mode line
  Spaceline
  [[https://github.com/TheBB/spaceline]]
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :config
      (spaceline-spacemacs-theme)
      (spaceline-helm-mode)
      (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
      (setq spaceline-minor-modes-p nil))
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
 ;; (defadvice vc-mode-line (after strip-backend () activate)
 ;;   (when (stringp vc-mode)
 ;;     (let ((noback (replace-regexp-in-string
 ;;                    (format "^ %s" (vc-backend buffer-file-name))
 ;;                    " " vc-mode)))
 ;;       (setq vc-mode noback))))        ;
  #+END_SRC
* More sensible defaults
  A bunch of stuff that really should be the default configuration.
** Reload changed files automatically
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
   #+END_SRC
** Seperate Custom File
   This gets rid of the auto generated data that 'custom' saves to the init file
   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (load-file custom-file)
   #+END_SRC
** Save session
   #+BEGIN_SRC emacs-lisp
     (desktop-save-mode 1)
   #+END_SRC
** Quit ediff without prompt
   #+BEGIN_SRC emacs-lisp
     (defun disable-y-or-n-p (orig-fun &rest args)
       (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
         (apply orig-fun args)))
     (advice-add 'ediff-quit :around #'disable-y-or-n-p)
   #+END_SRC

** Kill processes without prompt when quitting
   #+BEGIN_SRC emacs-lisp
     (setq confirm-kill-processes nil)
   #+END_SRC
** No annoying prompts when creating a new file
   #+BEGIN_SRC emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil
   helm-ff-newfile-prompt-p nil
  ido-create-new-buffer 'always)
   #+END_SRC
** y/n is enough
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** UTF-8 Encoding
   #+BEGIN_SRC emacs-lisp
   (setq locale-coding-system 'utf-8) ; pretty
   (set-terminal-coding-system 'utf-8) ; pretty
   (set-keyboard-coding-system 'utf-8) ; pretty
   (set-selection-coding-system 'utf-8) ; please
   (prefer-coding-system 'utf-8) ; with sugar on top
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** Unique buffer names when same file names
   #+BEGIN_SRC emacs-lisp
   (setq uniquify-buffer-name-style 'forward)
   #+END_SRC
** Recent files
   #+BEGIN_SRC emacs-lisp
     (recentf-mode 1)
     (setq recentf-max-menu-items 100)
   #+END_SRC
** Disable lock files
   #+BEGIN_SRC emacs-lisp
     (setq create-lockfiles nil)
   #+END_SRC
** Higher GC treshold
   Allow 20MB before calling the garbage collection. Default ist 0.8MB.
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+END_SRC
** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Single Space after periods
   #+BEGIN_SRC emacs-lisp
     (setq sentence-end-double-space nil)
   #+END_SRC
** Always end with a new line
   #+BEGIN_SRC emacs-lisp
     (setq require-final-newline t)
   #+END_SRC
** No Backup Files (~)
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil) ;; TODO only in git?
   #+END_SRC
** No auto-save files (##)
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil) ;; TODO only in git?
   #+END_SRC
* Keybindings
  https://github.com/noctuid/general.el/
  Keybindings are defined using general.el
** Leader Menu
   Spacemacs-like leader menu using space as a prefix.
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :config
       (general-evil-setup t)
       (general-create-definer nri/leader
         :prefix "SPC")
       (general-create-definer nri/major-leader
         :prefix "SPC m")
       (nri/leader
         :keymaps 'override
         :states '(normal visual motion emacs)
         "SPC" 'helm-M-x
         "TAB" '(mode-line-other-buffer :which-key "previous")

         "'" '(lambda ()(interactive)(ansi-term "/bin/zsh") :which-key "terminal")


         "/" '(swiper :which-key "search")

         "a" '(:ignore t :which-key "Applications")
         "aa" '(:ignore t :which-key "Anki")
         "aai" '(anki-editor-insert-note :which-key "Insert Note")
         "aap" '(anki-editor-push-notes :which-key "Push Notes")
         "b" '(:ignore t :which-key "buffers")
         "bb" '(helm-mini :which-key "list")

         "c" '(org-latex-export-to-pdf :which-key "Latex PDF")

         "e" '(:ignore t :which-key "emacs")
         "ed" '(:ignore t :which-key "describe")
         "edv" '(describe-variable :which-key "variable")
         "edf" '(describe-function :which-key "function")
         "edk" '(describe-key :which-key "key")
         "edm" '(describe-minor-mode :which-key "minor mode")
         "edM" '(describe-mode :which-key "all modes")

         "ee" '(:ignore t :which-key "eval")
         "eee" '(eval-last-sexp :which-key "expression")
         "eer" '(eval-region :which-key "region")


         "f" '(:ignore t :which-key "file")
         "ff" '(find-file :which-key "find")
         "fg" '(counsel-git :which-key "git")
         "fs" '(save-buffer :which-key "save")
         "fr" '(counsel-recentf :which-key "recent")

         "g" '(:ignore t :which-key "git")
         "gs" '(magit-status :which-key "status")
         "i" '(:ignore t :which-key "insert")
         "ic" '(insert-char :which-key "char")

         "p" '(:ignore t :which-key "projectile")
         "pf" '(projectile-find file :which-key "find file")

         "r" '(:ignore t :w-k "refactor")
         "rr" '(lsp-rename :w-k "rename")
         "s" '(:ignore t :w-k "snippets")
         "ss" '(yas-new-snippet :w-k "new snippet")
         "si" '(yas-insert-snippet :w-k "insert")

         "w" '(:ignore t :which-key "window")
         "wh" '(evil-window-left :which-key "left")
         "wj" '(evil-window-down :which-key "down")
         "wk" '(evil-window-up :which-key "up")
         "wl" '(evil-window-right :which-key "right")
         "wv" '(evil-window-vsplit :w-k "split vertically")
         "ww" '(evil-window-next :w-k "next")
         "wq" '(evil-window-delete :which-key "quit")
         "w=" '(balance-windows :which-key "quit")
         )
       )
   #+END_SRC

** Which-Key
   https://github.com/justbur/emacs-which-key
   Which-key shows all available keybindings when pressing keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (setq which-key-separator " ")
       (setq which-key-prefix-prefix "+")
       (setq which-key-idle-delay 0.3)
       (which-key-mode 1))
   #+END_SRC
* Incremental Completion Framework
** Ivy
   #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (setq ivy-use-virtual-buffers t))
    (use-package swiper)
    (use-package counsel
      :general
      (:keymaps 'ivy-minibuffer-map
                "<escape>" 'minibuffer-keyboard-quit
                "C-j" 'ivy-next-line
                "C-w" 'backward-kill-word)
      (:keymaps 'swiper-map
               "<escape>" 'minibuffer-keyboard-quit)
      :config
      ;; (ivy-mode 1)
      ;; (counsel-mode)
      (setq ivy-re-builders-alist
            '((t . ivy--regex-fuzzy))) ;; Fuzzy for everything TODO: not for swiper etc.
      ;; (setq ivy-initial-inputs-alist nil) ;; no ^ at the start
      (define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line))
   #+END_SRC
** Helm
   #+BEGIN_SRC emacs-lisp
(use-package helm
:config
(setq helm-recentf-fuzzy-match t)
(setq helm-buffers-fuzzy-matching t)
(setq helm-mode-fuzzy-match t)
(setq helm-M-x-fuzzy-match t)
(setq helm-completion-in-region-fuzzy-match t)
:general
(:keymaps 'helm-map
"C-j" 'helm-next-line
"C-k" 'helm-previous-line))
;; (use-package helm-swoop)
   #+END_SRC

* Editing
** Folding
   #+BEGIN_SRC emacs-lisp
     (use-package origami)
   #+END_SRC
** Evil
   Vim inside Emacs
*** Evil Mode
    https://github.com/emacs-evil/evil
    #+BEGIN_SRC emacs-lisp
           (use-package evil
             :init
             (setq evil-want-keybinding nil)
             :config
             (evil-mode 1)
             (setq evil-want-C-u-scroll t)) ;; TODO: doesn't work..
             :general

    #+END_SRC
*** Evil Surround
    https://github.com/emacs-evil/evil-surround
    #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :after evil
       :config
       (global-evil-surround-mode 1))
    #+END_SRC
*** Evil Collection
    https://github.com/emacs-evil/evil-collection
    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
        :after evil
        :config
        (setq evil-collection-outline-bind-tab-p nil)
        (evil-collection-init))
    #+END_SRC
*** Evil Nerd Commenter
    https://github.com/redguardtoo/evil-nerd-commenter
    #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter
        :after evil
        :config
        (evilnc-default-hotkeys))
    #+END_SRC
*** evil-easymotion
    https://github.com/PythonNut/evil-easymotion
    #+BEGIN_SRC emacs-lisp
      (use-package evil-easymotion
        :config
        (evilem-default-keybindings "SPC"))

    #+END_SRC
** Parenthesis
   Automatically insert pair of parens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :config
       (smartparens-global-mode 1))
   #+END_SRC
** Jump to Definition
   https://github.com/jacktasia/dumb-jump
   #+BEGIN_SRC emacs-lisp
   (use-package dumb-jump)
   #+END_SRC
** Anzu
   Search Improvements
   [[https://github.com/syohex/emacs-anzu]]
   #+BEGIN_SRC emacs-lisp
     (use-package anzu
       :config
       (setq anzu-cons-mode-line-p nil)
       (global-anzu-mode))
   #+END_SRC

* Autocompletion
** Company Mode
   #+BEGIN_SRC emacs-lisp
    (use-package company)
   #+END_SRC
** Company Mode Icons
   #+BEGIN_SRC emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode))
   #+END_SRC

** Company Mode Formatting
   #+BEGIN_SRC emacs-lisp
   ;; auto completion
   ;;(custom-set-faces
   ;;'(company-tooltip-common
   ;;  ((t (:inherit company-tooltip :weight bold :underline nil))))
   ;; '(company-tooltip-common-selection
    ;;  ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
   ;;(setq company-tooltip-limit 5
   ;; company-tooltip-align-annotations t
   ;; company-go-show-annotation t
   ;; company-tooltip-minimum 5)
   #+END_SRC
* Syntax Checking
  Automatically check syntax using Flycheck.
  https://github.com/flycheck/flycheck/
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
  #+END_SRC
* EditorConfig
  #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :config
       (editorconfig-mode 1))
  #+END_SRC
* Git
** Magit
   https://github.com/magit/magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
** Evil Magit
   [[https://github.com/emacs-evil/evil-magit]]
   #+BEGIN_SRC emacs-lisp
(use-package evil-magit)
   #+END_SRC

** Start commit message in insert mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'git-commit-mode-hook 'evil-insert-state)
   #+END_SRC

* UI
** Font
   #+BEGIN_SRC emacs-lisp
   (set-frame-font "Source Code Pro-13" nil t)
   ;; (set-frame-font "Fira Code-13" nil t)
   #+END_SRC

** Theme
   Poet
   #+BEGIN_SRC emacs-lisp
(use-package poet-theme)

   #+END_SRC
   Spacemacs Theme
   #+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
:defer t
:init
(load-theme 'spacemacs-dark t ))

   #+END_SRC
** Misc
*** relative line numbers
    #+BEGIN_SRC emacs-lisp
     (setq display-line-numbers 'relative)
     (global-display-line-numbers-mode)
    #+END_SRC
*** visual stuff
    #+BEGIN_SRC emacs-lisp
     (setq line-spacing 0.1)
     (setq left-margin-width 2)
     (setq right-margin-width 2)

     ;; Turn off the blinking cursor
     (blink-cursor-mode -1)
    #+END_SRC
*** Show matching parens
    #+BEGIN_SRC emacs-lisp
     (setq show-paren-delay 0)
     (show-paren-mode 1)
    #+END_SRC
*** show eldoc near point
    buggy, doesn't display current arguments
    disabled for now

    #+BEGIN_SRC emacs-lisp
     ;;     (defun nri/eldoc-display-near-point (format-string &rest args)
     ;;      "Display eldoc message near point."
     ;;      (when format-string
     ;;        (pos-tip-show (apply 'format format-string args) nil nil nil)))
     ;; (setq eldoc-message-function #'nri/eldoc-display-near-point)
    #+END_SRC

*** transparency
    #+BEGIN_SRC emacs-lisp

;(set-frame-parameter (selected-frame) 'alpha '(85 50))
;(add-to-list 'default-frame-alist '(alpha 85 50))
    #+END_SRC
** Scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-step 1
           scroll-conservatively 10000)

   #+END_SRC
* Projectile
  Project Management
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (setq projectile-completion-system 'ivy))

  #+END_SRC
* Languages
** Emacs Lisp
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Language Server Protocol
*** Main
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
        :hook ((rust-mode . lsp)
               (c++-mode . lsp)
               (c-mode . lsp))
        :general
        (:keymaps 'lsp-mode-map
                  :states '(normal visual)
                  "gd" 'lsp-find-definition
                  "gD" 'lsp-ui-peek-find-references)
        :config
        ;; debug
        ;; (setq lsp-log-io t)
        (setq lsp-prefer-flymake nil)
        ;; (setq lsp-enable-semantic-highlighting t)
        (setq lsp-auto-guess-root t))
    #+END_SRC
*** Enhanced UI
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :config
        (setq lsp-ui-doc-include-signature t)
        (setq lsp-ui-flycheck-enable t)
        (setq lsp-ui-peek-always-show t)
        :general
        (:keymaps '(lsp-ui-peek-mode-map)
                  "C-j" 'lsp-ui-peek--select-next
                  "C-k" 'lsp-ui-peek--select-prev))
    #+END_SRC

*** Company
    #+BEGIN_SRC emacs-lisp
    (use-package company-lsp)
    #+END_SRC

*** Helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm-lsp
        :config (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
    #+END_SRC

*** Debug (DAP)
    #+BEGIN_SRC emacs-lisp

     (use-package dap-mode)
    #+END_SRC

*** Origami
    #+BEGIN_SRC emacs-lisp
(use-package lsp-origami
       :config
       (add-hook 'origami-mode-hook #'lsp-origami-mode))
    #+END_SRC

** Rust
*** Rust Mode
    https://github.com/rust-lang/rust-mode
    #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :config
       (setq rust-format-on-save t)
       (nri/major-leader
         :states '(normal visual motion emacs)
         :keymaps 'rust-mode-map
         "r" 'rust-run
         ))
    #+END_SRC

*** Rust Flycheck
    Improved Flycheck config for Rust.
    https://github.com/flycheck/flycheck-rust
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-rust
        :config
        (with-eval-after-load 'rust-mode
          (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
    #+END_SRC

** TOML
   https://github.com/dryman/toml-mode.el
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode)
   #+END_SRC

** C/C++
*** ccls

 #+BEGIN_SRC emacs-lisp
   (use-package ccls
     :config
     (setq ccls-initialization-options '(:cache(:directory :/tmp/ccls-cache))))
 #+END_SRC

** Markdown
   https://github.com/jrblevin/markdown-mode
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
   #+END_SRC
** Org
*** Org Setup & Keybindings
    #+BEGIN_SRC emacs-lisp
      ;; (defun nri/org-context())
        (use-package org
          :general
          (nri/major-leader
            :states '(normal visual motion emacs)
            :keymaps 'org-mode-map
            "a" 'org-agenda
            "A" 'org-attach
            "n" 'org-noter
            "ll" 'org-toggle-latex-fragment
            "o" 'org-open-at-point
            )
          (:keymap org-mode-map
                   :keymaps 'override
                   "M-h" 'outline-promote
                   "M-j" 'outline-move-subtree-down
                   "M-k" 'outline-move-subtree-up
                   "M-l" 'outline-demote)
                   ;; "<return>" 'org-edit-special
          (:keymaps 'org-src-mode-map
                   :states '(normal visual)
                   "<tab>" 'org-edit-src-exit))
    #+END_SRC
*** Drag & Drop files to org modes
    #+BEGIN_SRC emacs-lisp
   (use-package org-download)
    #+END_SRC
*** show entities as UTF8 characters
    #+BEGIN_SRC emacs-lisp
     ;; (setq org-pretty-entities t)
    #+END_SRC
*** Inline Images
    #+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
    #+END_SRC

*** Latex preview
**** Larger Preview
     #+BEGIN_SRC emacs-lisp
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
     #+END_SRC
**** store Latex preview in ~/.cache/emacs/org
     This gets rid of the ltximg directories when using latex fragments
     #+BEGIN_SRC emacs-lisp
     (setq org-preview-latex-image-directory "~/.cache/emacs/org/")
     #+END_SRC
**** Start with Latex Fragments
     #+BEGIN_SRC emacs-lisp
(setq org-startup-with-latex-preview t)
     #+END_SRC

**** Automatically preview latex fragments
     Taken from https://gist.githubusercontent.com/cvcore/760008a4dfb2eadf42afdc9cf01ef979/raw/ebb38d37c52f8931ab9c7feac7ffd02ad352e6bc/org-fragment-auto-preview.el

     Fixed for org 9.2
     #+BEGIN_SRC emacs-lisp
       (use-package org-auto-toggle
         :straight
         (org-auto-toggle :type git :host github :repo "nicories/org-auto-toggle")
         :config
         (add-hook 'post-command-hook 'org-auto-toggle/org-auto-toggle-fragment-display t))
     #+END_SRC



*** Never emulate tab
    #+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab nil)
    #+END_SRC


*** Bullets
    Nicer looking bullets
    #+BEGIN_SRC emacs-lisp
     ;; (use-package org-bullets
     ;;   :init
     ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
*** Babel
    #+BEGIN_SRC emacs-lisp
      ;; active Babel languages
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((gnuplot . t)))
      ;; add additional languages with '((language . t)))
    #+END_SRC
*** Org Noter
    https://github.com/weirdNox/org-noter
    Annotate PDF files within org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package org-noter
        :config
        (setq org-noter-auto-save-last-location t))
    #+END_SRC
* Snippets
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :config
       (yas-global-mode 1)) ;; enable yasnippet everywhere
   #+END_SRC
** TODO auto-yasnippet
   # https://github.com/abo-abo/auto-yasnippet
   # Create Snippets on the go
   # #+BEGIN_SRC emacs-lisp
   #   (use-package auto-yasnippet)
   # #+END_SRC
* Applications
** Anki
   Edit Anki Cards in Org-Mode
   https://github.com/louietan/anki-editor
   #+BEGIN_SRC emacs-lisp
     (use-package anki-editor
       :init
       (setq anki-editor-use-math-jax t) ;; use mathjax syntax "\(\)" instead of latex
       :config
       (setq anki-editor-create-decks t)
       (defun nri/anki-basic () (anki-editor--insert-note-skeleton nil (org-entry-get-with-inheritance anki-editor-prop-deck) "Header" "Basic" '("Front" "Back")))
       (defun nri/anki-basic-reverse () (anki-editor--insert-note-skeleton nil (org-entry-get-with-inheritance anki-editor-prop-deck) "Header" "Basic (and reversed card)" '("Front" "Back"))))
   #+END_SRC
** PDF Viewer
   Display PDF Files inside Emacs
   https://github.com/politza/pdf-tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :config
       (pdf-tools-install))
   #+END_SRC
* Terminal
  - make URLs clickable
  #+BEGIN_SRC emacs-lisp
    (add-hook 'term-mode-hook
              (lambda ()
                (goto-address-mode)))
  #+END_SRC
