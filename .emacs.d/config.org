#+TITLE: Configuration
* More sensible defaults
  A bunch of stuff that really should be the default configuration.
** Reload changed files automatically
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
     (setq global-auto-revert-non-file-buffers t) ;; also dired etc
     (setq auto-revert-verbose nil) ;; no messages
   #+END_SRC
** Highlight HTTP Links
   #+BEGIN_SRC emacs-lisp
   (use-package goto-addr
   :hook (prog-mode . goto-address-prog-mode))
   #+END_SRC
** Better compilation buffer
   #+BEGIN_SRC emacs-lisp
   (setq compilation-scroll-output 'first-error)
   #+END_SRC

** Seperate Custom File
   This gets rid of the auto generated data that 'custom' saves to the init file
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name (concat user-emacs-directory "custom.el")))
     (load-file custom-file)
   #+END_SRC
** Save session
   #+BEGIN_SRC emacs-lisp
     ;; (desktop-save-mode t) ;; return to last buffers
     (save-place-mode t) ;; return to point in buffer
     (savehist-mode t) ;; save minibuffer history
   #+END_SRC
** Quit ediff without prompt
   #+BEGIN_SRC emacs-lisp
     (defun disable-y-or-n-p (orig-fun &rest args)
       (letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
         (apply orig-fun args)))
     (advice-add 'ediff-quit :around #'disable-y-or-n-p)
   #+END_SRC

** Kill processes without prompt when quitting
   #+BEGIN_SRC emacs-lisp
     (setq confirm-kill-processes nil)
   #+END_SRC
** No annoying prompts when creating a new file
   #+BEGIN_SRC emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil
   helm-ff-newfile-prompt-p nil
  ido-create-new-buffer 'always)
   #+END_SRC
** y/n is enough
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** UTF-8 Encoding
   #+BEGIN_SRC emacs-lisp
   (setq locale-coding-system 'utf-8) ; pretty
   (set-terminal-coding-system 'utf-8) ; pretty
   (set-keyboard-coding-system 'utf-8) ; pretty
   (set-selection-coding-system 'utf-8) ; please
   (prefer-coding-system 'utf-8) ; with sugar on top
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** Unique buffer names when same file names
   #+BEGIN_SRC emacs-lisp
   (setq uniquify-buffer-name-style 'forward)
   #+END_SRC
** Recent files
   #+BEGIN_SRC emacs-lisp
     (recentf-mode 1)
     (setq recentf-max-menu-items 500)
     (setq recentf-max-saved-items 500)
   #+END_SRC
** Disable lock files
   #+BEGIN_SRC emacs-lisp
     (setq create-lockfiles nil)
   #+END_SRC
** Higher GC treshold
   Allow 100MB before calling the garbage collection. Default ist 0.8MB.
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 100000000)
   #+END_SRC
** Let Emacs reads more data 
   #+BEGIN_SRC emacs-lisp
     (setq read-process-output-max (* 1024 1024)) ;; 1mb
   #+END_SRC

** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
   ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Keep selection after operation
   #+BEGIN_SRC emacs-lisp
(transient-mark-mode 0)
   #+END_SRC

** Single Space after periods
   #+BEGIN_SRC emacs-lisp
     (setq sentence-end-double-space nil)
   #+END_SRC
** Always end with a new line
   #+BEGIN_SRC emacs-lisp
     (setq require-final-newline t)
   #+END_SRC
** No Backup Files (~)
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil) ;; TODO only in git?
   #+END_SRC
** No auto-save files (##)
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil) ;; TODO only in git?
   #+END_SRC
** Autoload
   #+BEGIN_SRC emacs-lisp
   (setq load-prefer-newer t)
   #+END_SRC
** Make quoted-insert Hex by default
   #+BEGIN_SRC emacs-lisp
(setq read-quoted-char-radix 16)
   #+END_SRC
** Show Commands in minibuffer instantly
   #+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.01)
   #+END_SRC
** Load 100MB Files without asking
   #+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
   #+END_SRC
** No Cursor in Minibuffer
   #+BEGIN_SRC emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
   #+END_SRC
** Follow Symlinks automatically
   #+BEGIN_SRC emacs-lisp
   (setq vc-follow-symlinks t)
   #+END_SRC

* Keybindings
  https://github.com/noctuid/general.el/
  Keybindings are defined using general.el
** Leader Menu
   Spacemacs-like leader menu using space as a prefix.
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :config
       (general-evil-setup t)
       (general-create-definer nri/leader
         :prefix "SPC")
       (general-create-definer nri/major-leader
         :prefix "SPC m")
       (nri/leader
         :keymaps 'override
         :states '(normal visual motion emacs)
         "SPC" 'counsel-M-x
         "TAB" '(mode-line-other-buffer :which-key "previous")

         "'" '(vterm-other-window :which-key "terminal")


         "/" '(swiper :which-key "search")

         "a" '(:ignore t :which-key "Applications")

         "aa" '(:ignore t :which-key "Anki")
         "aai" '(anki-editor-insert-note :which-key "Insert Note")
         "aap" '(anki-editor-push-notes :which-key "Push Notes")

         "af" '(:ignore t :which-key "Fun")
         "afz" '(zone :which-key "Zone")

         "b" '(:ignore t :which-key "buffers")
         "bb" '(counsel-ibuffer :which-key "list")
         "bq" '(kill-this-buffer :which-key "kill")

         "c" '(org-latex-export-to-pdf :which-key "Latex PDF")

         "e" '(:ignore t :which-key "emacs")
         "ed" '(:ignore t :which-key "describe")
         "edv" '(describe-variable :which-key "variable")
         "edf" '(describe-function :which-key "function")
         "edp" '(describe-package :which-key "package")
         "edk" '(describe-key :which-key "key")
         "edm" '(describe-minor-mode :which-key "minor mode")
         "edM" '(describe-mode :which-key "all modes")

         "ee" '(:ignore t :which-key "eval")
         "eee" '(eval-last-sexp :which-key "expression")
         "eer" '(eval-region :which-key "region")


         "f" '(:ignore t :which-key "file")
         "ff" '(find-file :which-key "find")
         "fg" '(counsel-git :which-key "git")
         "fs" '(save-buffer :which-key "save")
         "fr" '(counsel-buffer-or-recentf :which-key "recent")
         
         "F" '(:ignore t :which-key "Frames")
         "Ff" '(make-frame :which-key "make")

         "g" '(:ignore t :which-key "git")
         "gs" '(magit-status :which-key "status")

         "i" '(:ignore t :which-key "insert")
         "ic" '(:ignore t :which-key "char")
         "icc" '(insert-char :which-key "char")
         "ich" '(quoted-insert :which-key "char")

         "p" '(:ignore t :which-key "projectile")
         "pp" '(projectile-switch-project file :which-key "switch")
         "pf" '(projectile-find-file :which-key "find file")

         "r" '(:ignore t :w-k "refactor")
         "rr" '(lsp-rename :w-k "rename")
         "s" '(:ignore t :w-k "search")
         "ss" '(counsel-google t :w-k "search")
         "S" '(:ignore t :w-k "snippets")
         "Ss" '(yas-new-snippet :w-k "new snippet")
         "Si" '(yas-insert-snippet :w-k "insert")

         "w" '(:ignore t :which-key "window")
         "wh" '(evil-window-left :which-key "left")
         "wH" '(evil-window-move-far-left :which-key "left")
         "wj" '(evil-window-down :which-key "down")
         "wJ" '(evil-window-move-very-bottom :which-key "down")
         "wk" '(evil-window-up :which-key "up")
         "wK" '(evil-window-move-very-top :which-key "up")
         "wl" '(evil-window-right :which-key "right")
         "wL" '(evil-window-move-far-right :which-key "right")
         "wv" '(evil-window-vsplit :w-k "split vertically")
         "ww" '(evil-window-next :w-k "next")
         "wq" '(evil-window-delete :which-key "quit")
         "w=" '(balance-windows :which-key "quit")
         )
       )
   #+END_SRC

** Which-Key
   https://github.com/justbur/emacs-which-key
   Which-key shows all available keybindings when pressing keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       ;; (setq which-key-allow-evil-operators t)
       (setq which-key-show-operator-state-maps t)
       (setq which-key-separator " ")
       (setq which-key-prefix-prefix "+")
       (setq which-key-idle-delay 0.3)
       (which-key-mode 1))
   #+END_SRC
** Mouse Scrolling
   #+BEGIN_SRC emacs-lisp
     (use-package scroll-on-drag
       :general
       (:keymaps 'override
                 :states '(normal)
                 "<down-mouse-2>" 'scroll-on-drag))
   #+END_SRC

* Incremental Completion Framework
** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :config
       (setq ivy-use-virtual-buffers t))
     (use-package swiper)
     (use-package counsel
       :general
       (:keymaps 'ivy-minibuffer-map
                 "<escape>" 'minibuffer-keyboard-quit
                 "C-j" 'ivy-next-line
                 "C-w" 'backward-kill-word)
       (:keymaps 'swiper-map
                 "<escape>" 'minibuffer-keyboard-quit)
       :config
       (ivy-mode 1)
       (counsel-mode)
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-re-builders-alist
             '((swiper . ivy--regex-plus)(t . ivy--regex-fuzzy))) ;; Fuzzy for everything TODO: not for swiper etc.
       ;; (setq ivy-initial-inputs-alist nil) ;; no ^ at the start
       (define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line))
   #+END_SRC
** Ivy Rich
   More friendly interface
   #+BEGIN_SRC emacs-lisp
     (use-package ivy-rich
       :config
       (setq ivy-rich-path-style 'abbrev)
       (ivy-rich-mode 1))
   #+END_SRC

** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :config
       (setq helm-recentf-fuzzy-match t)
       (setq helm-buffers-fuzzy-matching t)
       (setq helm-mode-fuzzy-match t)
       (setq helm-M-x-fuzzy-match t)
       (setq helm-completion-in-region-fuzzy-match t)
       :general
       (:keymaps 'helm-map
                 "C-j" 'helm-next-line
                 "C-k" 'helm-previous-line))
     ;; (use-package helm-swoop)
   #+END_SRC
** Smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :config
       (setq smex-history-length 32))
   #+END_SRC
** Flx
   Better Fuzzy Matching for Ivy etc.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package flx)
   #+END_SRC

* Editing
** Folding
   #+BEGIN_SRC emacs-lisp
     (use-package origami
       ;; TODO: enable, but disable in insert-mode
       ;; :hook ((prog-mode conf-mode) . origami-mode)
       :general
       (:keymaps 'origami-mode-map
                 "<tab>" 'origami-recursively-toggle-node))
   #+END_SRC
** Evil
   Vim inside Emacs
*** Evil Mode
    https://github.com/emacs-evil/evil
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :init
        (setq evil-want-C-u-scroll t)
        (setq evil-want-keybinding nil)
        :config
        (evil-mode 1))

    #+END_SRC
*** Evil Surround
    https://github.com/emacs-evil/evil-surround
    #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :after evil
        :config
        ;;(push '(?\\ . evil-surround-read-tag) evil-surround-pairs-alist)
        (global-evil-surround-mode 1))

    #+END_SRC
*** Evil Collection
    https://github.com/emacs-evil/evil-collection
    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
        :after evil
        :config
        (setq evil-collection-outline-bind-tab-p nil)
(setq evil-collection-company-use-tng nil)
        (evil-collection-init))
    #+END_SRC
*** Evil Nerd Commenter
    https://github.com/redguardtoo/evil-nerd-commenter
    #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter
        :after evil
        :config
        (evilnc-default-hotkeys))
    #+END_SRC
*** evil-easymotion
    https://github.com/PythonNut/evil-easymotion
    #+BEGIN_SRC emacs-lisp
      (use-package evil-easymotion
        :config
        (evilem-default-keybindings "SPC"))

    #+END_SRC
*** evil-numbers
    #+BEGIN_SRC emacs-lisp
      (use-package evil-numbers
        :straight
        (evil-numbers :type git :host github :repo "janpath/evil-numbers")
        :config
        (setq evil-numbers/padDefault t)
        :general
        (:keymaps 'override
                  :states '(normal visual motion emacs)
                  "g C-a" 'evil-numbers/inc-at-pt-incremental
                  "g C-x" 'evil-numbers/dec-at-pt-incremental
                  "C-a" 'evil-numbers/inc-at-pt
                  "C-x" 'evil-numbers/dec-at-pt))
    #+END_SRC
*** evil-goggles
    #+BEGIN_SRC emacs-lisp
      ;; laggy, disabled for now
      ;; (use-package evil-goggles)
    #+END_SRC
** Parenthesis
   Automatically insert pair of parens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :config
       (smartparens-global-mode 1))
   #+END_SRC
** Jump to Definition
   https://github.com/jacktasia/dumb-jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump)
   #+END_SRC
** Anzu
   Search Improvements
   [[https://github.com/syohex/emacs-anzu]]
   #+BEGIN_SRC emacs-lisp
     (use-package anzu
       :config
       (setq anzu-cons-mode-line-p nil)
       (global-anzu-mode))
   #+END_SRC

* Syntax Checking
  Automatically check syntax using Flycheck.
  https://github.com/flycheck/flycheck/
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :init (global-flycheck-mode))
  #+END_SRC
* EditorConfig
  #+BEGIN_SRC emacs-lisp
    (use-package editorconfig
      :config
      (editorconfig-mode 1))
  #+END_SRC
* Git
** Magit
   https://github.com/magit/magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
** Evil Magit
   [[https://github.com/emacs-evil/evil-magit]]
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit)
   #+END_SRC

** Start commit message in insert mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'git-commit-mode-hook 'evil-insert-state)
   #+END_SRC

** Show Diff in Buffer
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :config
       (global-diff-hl-mode t))
   #+END_SRC
* UI
** Font
   #+BEGIN_SRC emacs-lisp
     (if (equal "merkur" (system-name)) (set-frame-font "Hack-22" nil t) (set-frame-font "Hack-14" nil t))
     ;; (set-frame-font "Fira Code-13" nil t)
   #+END_SRC

** Theme
   Spacemacs Theme
   #+BEGIN_SRC emacs-lisp
     (use-package spacemacs-theme
       :defer t
       :init
       (load-theme 'spacemacs-dark t)
       )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes)
   #+END_SRC
** Misc
*** relative line numbers
    #+BEGIN_SRC emacs-lisp
      (global-display-line-numbers-mode t)
      (setq display-line-numbers-type 'relative)
      (setq display-line-numbers-grow-only t)
      (setq display-line-numbers-width-start t)
    #+END_SRC
*** visual stuff
    #+BEGIN_SRC emacs-lisp
      (setq line-spacing 0.1)
      (setq left-margin-width 2)
      (setq right-margin-width 2)

      ;; Turn off the blinking cursor
      (blink-cursor-mode -1)
    #+END_SRC
*** Show matching parens
    #+BEGIN_SRC emacs-lisp
      (setq show-paren-delay 0)
      (show-paren-mode 1)
    #+END_SRC
*** show eldoc near point
    buggy, doesn't display current arguments
    disabled for now

    #+BEGIN_SRC emacs-lisp
      ;;     (defun nri/eldoc-display-near-point (format-string &rest args)
      ;;      "Display eldoc message near point."
      ;;      (when format-string
      ;;        (pos-tip-show (apply 'format format-string args) nil nil nil)))
      ;; (setq eldoc-message-function #'nri/eldoc-display-near-point)
    #+END_SRC

*** transparency
    #+BEGIN_SRC emacs-lisp

                                              ;(set-frame-parameter (selected-frame) 'alpha '(85 50))
                                              ;(add-to-list 'default-frame-alist '(alpha 85 50))
    #+END_SRC

*** visualize color codes
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-mode
        :config
        (rainbow-mode t))
    #+END_SRC

*** Symbols
    #+BEGIN_SRC emacs-lisp
      (setq prettify-symbols-unprettify-at-point 'right-edge)
      (setq-default prettify-symbols-alist '(
                                             ;; ("#+BEGIN_SRC" . "")
                                             ;; ("#+END_SRC" . "")
                                             ;; ("#+BEGIN_SRC"     . "")
                                             ;; ("#+END_SRC"       . "")
                                             ;; ("#+BEGIN_SRC python" . "")
                                             ;; ("#+BEGIN_SRC emacs-lisp" . "")
                                             ))
      (global-prettify-symbols-mode t)
    #+END_SRC
    #+BEGIN_SRC bash

    #+END_SRC
** Scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-step 1
           scroll-conservatively 10000)

   #+END_SRC

** Highlight indendation
   #+BEGIN_SRC emacs-lisp
                                             ;(use-package highlight-indent-guides
                                             ;:hook (prog-mode . highlight-indent-guides))
   #+END_SRC

** Highlight surrounding parentheses
   #+BEGIN_SRC emacs-lisp
                                             ; (use-package highlight-parentheses
                                             ; :hook (prog-mode . highlight-parentheses))
   #+END_SRC

** Highlight current line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
   #+END_SRC

** Mode line
*** Spaceline
    Spaceline
    [[https://github.com/TheBB/spaceline]]
    #+BEGIN_SRC emacs-lisp
      ;; (use-package spaceline
      ;;   :config
      ;;   (spaceline-spacemacs-theme)
      ;;   (spaceline-helm-mode)
      ;;   (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
      ;;   (setq spaceline-minor-modes-p nil))
    #+END_SRC


    #+BEGIN_SRC emacs-lisp
      ;; (defadvice vc-mode-line (after strip-backend () activate)
      ;;   (when (stringp vc-mode)
      ;;     (let ((noback (replace-regexp-in-string
      ;;                    (format "^ %s" (vc-backend buffer-file-name))
      ;;                    " " vc-mode)))
      ;;       (setq vc-mode noback))))        ;
    #+END_SRC

*** Doom Line
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
        :config
        (set-face-attribute 'doom-modeline-buffer-modified nil
                            :inherit 'doom-modeline-buffer-path)

        (setq doom-modeline-buffer-modification-icon nil)
        (setq doom-modeline-buffer-file-name-style 'relative-from-project)
        ;; (setq doom-modeline-buffer-file-name-style 'relative-to-project)
        :hook (after-init . doom-modeline-mode))
    #+END_SRC

* Projectile
  Project Management
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (projectile-register-project-type 'embedded-arm-c '("Makefile")
                                        :compile "make"
                                        :test "make test"
                                        :run "make run")
      (projectile-register-project-type 'embedded-arm-asm '("Makefile")
                                        :compile "make"
                                        :test "make test"
                                        :run "make run")
      (projectile-register-project-type 'embedded-arm-hal-make '("Makefile")
                                        :compile "make"
                                        :test "make test"
                                        :run "make run")

      (setq projectile-completion-system 'ivy)
      ;; fixes directory not found bug
      (setq projectile-git-submodule-command nil)
      (projectile-mode))
  #+END_SRC
* Languages
** Emacs Lisp
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Language Server Protocol
*** Main
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
        :hook (
               (c++-mode . lsp)
               (c-mode . lsp))
        :general
        (:keymaps 'lsp-mode-map
                  :states '(normal visual)
                  "gd" 'lsp-find-definition
                  "gD" 'lsp-ui-peek-find-references)
        :config
        ;; debug
        ;; (setq lsp-log-io t)
        (setq lsp-prefer-flymake nil)
        (setq lsp-enable-semantic-highlighting t)
      (setq lsp-rust-server 'rust-analyzer)
      (setq lsp-auto-guess-root t))
    #+END_SRC
*** Keybindings
    Major Mode Keybindings
    #+BEGIN_SRC emacs-lisp
      (defun nri/lsp-major-leader ()
        (nri/major-leader
          :states '(normal visual motion emacs)
          "" 'org-agenda
          ))
    #+END_SRC

*** Enhanced UI
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :config
        (setq lsp-ui-doc-include-signature t)
        (setq lsp-ui-flycheck-enable t)
        (setq lsp-ui-peek-always-show t)
        (lsp-lens-mode)
        :general
        (:keymaps '(lsp-ui-peek-mode-map)
                  "C-j" 'lsp-ui-peek--select-next
                  "C-k" 'lsp-ui-peek--select-prev))
    #+END_SRC

*** Company
    #+BEGIN_SRC emacs-lisp
      (use-package company-lsp
        :config
        ;; (setq company-lsp-cache-candidates 'auto)
        )
    #+END_SRC
*** Helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm-lsp
        :config (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
    #+END_SRC

*** Debug (DAP)
    #+BEGIN_SRC emacs-lisp
      (use-package dap-mode
        :config
        (add-hook 'dap-stopped-hook
                  (lambda (arg) (call-interactively #'dap-hydra))))
    #+END_SRC
*** LSP Origami
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-origami
        :hook (lsp . lsp-origami))
    #+END_SRC

** Rust
*** Rust Mode
    https://github.com/rust-lang/rust-mode
    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode
        :hook
        (rust-mode . lsp)
        :config
        (setq rust-format-on-save t)
        (setq lsp-rust-analyzer-server-command "rust-analyzer") ;; installed from AUR
        (nri/major-leader
          :states '(normal visual motion emacs)
          :keymaps 'rust-mode-map
          "r" 'rust-run
          )
        :general
        (:keymaps 'rust-mode-map
         :states '(normal visual motion emacs)
                  "J" 'lsp-rust-analyzer-join-lines))
    #+END_SRC

*** Rust Flycheck
    Improved Flycheck config for Rust.
    https://github.com/flycheck/flycheck-rust
    #+BEGIN_SRC emacs-lisp
      ;; (use-package flycheck-rust
      ;;   :config
      ;;   (with-eval-after-load 'rust-mode
      ;;     (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
    #+END_SRC

** TOML
   https://github.com/dryman/toml-mode.el
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode)
   #+END_SRC

** XML
   #+BEGIN_SRC emacs-lisp
(use-package xml)
   #+END_SRC


** C/C++
*** ccls
    #+BEGIN_SRC emacs-lisp
      (use-package ccls
        :config
        ;; move cache to /tmp/
        ;; (setq ccls-args '("--init={\"cache\": {\"directory\": \"/tmp/ccls-cache\"}}")))
      ;; semantic highlighting, TODO
      ;; (setq ccls-sem-highlight-method 'overlay))
)
    #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp
      (nri/major-leader
        :states '(normal visual motion emacs)
        :keymaps 'c-mode-map
        "c" 'rust-run
        )
    #+END_SRC

** Markdown
   https://github.com/jrblevin/markdown-mode
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
   #+END_SRC

*** Evil Markdown
#+BEGIN_SRC emacs-lisp
  (use-package evil-markdown
    :straight
    (evil-markdown :type git :host github :repo "Somelauw/evil-markdown"))
#+END_SRC

** Org
*** Org Setup & Keybindings
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :general
        (nri/major-leader
          :states '(normal visual motion emacs)
          :keymaps 'org-mode-map
          "a" 'org-agenda
          "A" 'org-attach
          "e" 'org-export-dispatch
          "n" 'org-noter
          "o" 'org-open-at-point
          )
        (:keymap org-mode-map
                 :keymaps 'override
                 "M-h" 'outline-promote
                 "M-j" 'outline-move-subtree-down
                 "M-k" 'outline-move-subtree-up
                 "M-l" 'outline-demote)
        ;; "<return>" 'org-edit-special
        (:keymaps 'org-src-mode-map
                  :states '(normal visual)
                  "<tab>" 'org-edit-src-exit))
    #+END_SRC
*** Drag & Drop files to org modes
    #+BEGIN_SRC emacs-lisp
      (use-package org-download
        :config
        (setq org-download-method 'attach))
    #+END_SRC
*** show entities as UTF8 characters
    #+BEGIN_SRC emacs-lisp
      ;; (setq org-pretty-entities t)
    #+END_SRC
*** Inline Images
    #+BEGIN_SRC emacs-lisp
      (setq org-startup-with-inline-images t)
    #+END_SRC
*** Do not truncate lines

    #+BEGIN_SRC emacs-lisp
      (setq org-startup-truncated nil)
    #+END_SRC

*** Latex preview
**** Larger Preview
     #+BEGIN_SRC emacs-lisp
       (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
     #+END_SRC
**** store Latex preview in ~/.cache/emacs/org
     This gets rid of the ltximg directories when using latex fragments
     #+BEGIN_SRC emacs-lisp
       (setq org-preview-latex-image-directory "~/.cache/emacs/org/")
     #+END_SRC
**** Start with Latex Fragments
     #+BEGIN_SRC emacs-lisp
       (setq org-startup-with-latex-preview t)
     #+END_SRC

**** Automatically preview latex fragments
     Taken from https://gist.githubusercontent.com/cvcore/760008a4dfb2eadf42afdc9cf01ef979/raw/ebb38d37c52f8931ab9c7feac7ffd02ad352e6bc/org-fragment-auto-preview.el

     Fixed for org 9.2
     #+BEGIN_SRC emacs-lisp
       (use-package org-auto-toggle
         :straight
         (org-auto-toggle :type git :host github :repo "nicories/org-auto-toggle")
         :config
         (org-auto-toggle-mode))
     #+END_SRC
*** Never emulate tab
    #+BEGIN_SRC emacs-lisp
      (setq org-cycle-emulate-tab nil)
    #+END_SRC

*** Bullets
    Nicer looking bullets
    #+BEGIN_SRC emacs-lisp
      (setq org-hide-leading-stars t)
      ;; (use-package org-bullets
      ;;   :init
      ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
*** Babel
    #+BEGIN_SRC emacs-lisp
      ;; active Babel languages
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((gnuplot . t)
         (shell . t)
         (C . t)))
      ;; add additional languages with '((language . t)))
    #+END_SRC
*** Org Noter
    https://github.com/weirdNox/org-noter
    Annotate PDF files within org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package org-noter
        :config
        (setq org-noter-auto-save-last-location t))
    #+END_SRC
*** Attach
    #+BEGIN_SRC emacs-lisp
      (setq org-attach-use-inheritance t)
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
      ;; make directories relative
      (setq org-attach-dir-relative t)
    #+END_SRC
*** Org Mouse Support
    #+BEGIN_SRC emacs-lisp
      (require 'org-mouse)
    #+END_SRC


*** Export
    #+BEGIN_SRC emacs-lisp
      (use-package htmlize)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t)
      ;; (require 'ox-latex)
      ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
      ;; (setq org-latex-listings 'minted)
      ;; (setq org-latex-pdf-process
      ;;       '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
      (use-package htmlize)
    #+END_SRC

*** Pandoc
    #+BEGIN_SRC emacs-lisp
      (use-package ox-pandoc)
    #+END_SRC

*** Org Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/Cloud/Notizen/Routine.org"
                               "~/Cloud/Notizen/Notizen.org"
                               "~/Uni/Uni.org"))
#+END_SRC

** Evil Org
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC


** Plantuml
*** Plantuml Mode
    #+BEGIN_SRC emacs-lisp
      (use-package plantuml-mode
        :config
        ;; Enable plantuml-mode for PlantUML files
        (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
        (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
        (plantuml-enable-debug)
        ;; (setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
        (setq plantuml-executable-path "/usr/bin/plantuml")
        (setq plantuml-default-exec-mode 'executable))
    #+END_SRC
*** Plantuml Flycheck
    #+BEGIN_SRC emacs-lisp
      (flycheck-define-checker plantuml
        "A checker using plantuml.
      See `http://plantuml.com"
        :command ("plantuml" "-syntax")
        :standard-input t
        :error-patterns ((error line-start "ERROR" "\n" line "\n" (message) line-end))
        :modes plantuml-mode)

      (add-to-list 'flycheck-checkers 'plantuml)
    #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :hook (go-mode . lsp)
       :config
       (require 'dap-go)
       (add-hook 'before-save-hook 'gofmt-before-save))
   #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp

      (nri/major-leader
        :states '(normal visual motion emacs)
        :keymaps 'go-mode-map
        "c" 'rust-run
        )
    #+END_SRC

** Json
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :hook (json-mode . prettier-js-mode))
   #+END_SRC

** Yaml
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode)
   #+END_SRC
** Prettier
   Auto Format supported languages
   #+BEGIN_SRC emacs-lisp
     (use-package prettier-js)
   #+END_SRC
** TODO Bash
   #+BEGIN_SRC emacs-lisp
     (use-package sh-script
       :config
       (dolist (pattern '("\\.zsh\\'"
                          "zlogin\\'"
                          "zlogout\\'"
                          "zpreztorc\\'"
                          "zprofile\\'"
                          "zshenv\\'"
                          "zshrc\\'"))
         (add-to-list 'auto-mode-alist (cons pattern 'sh-mode)))
       :hook (sh-mode . lsp))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python
       :hook
       (python-mode . lsp))
   #+END_SRC

* Snippets
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :config
       (yas-global-mode 1)) ;; enable yasnippet everywhere
   #+END_SRC
** TODO auto-yasnippet
   # https://github.com/abo-abo/auto-yasnippet
   # Create Snippets on the go
   # #+BEGIN_SRC emacs-lisp
   #   (use-package auto-yasnippet)
   # #+END_SRC
* Applications
** Anki
   Edit Anki Cards in Org-Mode
   https://github.com/louietan/anki-editor
   #+BEGIN_SRC emacs-lisp
     (use-package anki-editor
       :straight
       (anki-editor :type git :branch "feature-quick-field-mappings" :host github :repo "leoc/anki-editor")
       :init
       (setq anki-editor-use-math-jax t) ;; use mathjax syntax "\(\)" instead of latex
       :config
       (push '("Basic (and reversed card)" . ("Front" . "Back")) anki-editor-quick-field-mapping)
       (setq anki-editor-create-decks t)
       ;; fix "Empty Reply" Bug
       (advice-add 'anki-editor-push-notes :before #'(lambda (&opt) (global-auto-revert-mode 0)))
       (advice-add 'anki-editor-push-notes :after #'(lambda (&opt) (global-auto-revert-mode 1))))
   #+END_SRC
** PDF Viewer
   Display PDF Files inside Emacs
   https://github.com/politza/pdf-tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       ;; no line numbers in pdf
       :hook (pdf-view-mode . (lambda () (display-line-numbers-mode 0)))
       :config
       (pdf-tools-install))
   #+END_SRC
** Epub Viewer
   #+BEGIN_SRC emacs-lisp
     (use-package nov
       :config
       (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
   #+END_SRC
** systemd
   #+BEGIN_SRC emacs-lisp
     (use-package systemd
       :hook (systemd-mode . company-mode))
   #+END_SRC
** ediff
   #+BEGIN_SRC emacs-lisp
     (use-package ediff
       :config
       (setq ediff-window-setup-function 'ediff-setup-windows-plain) ;; no separate control panel
       (setq ediff-split-window-function 'split-window-horizontally)
       (setq ediff-merge-split-window-function 'split-window-horizontally))
   #+END_SRC

* Terminal
  - make URLs clickable
  #+BEGIN_SRC emacs-lisp
    (add-hook 'term-mode-hook
              (lambda ()
                (goto-address-mode)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package vterm)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package vterm-toggle)
  #+END_SRC

* Misc
  TODO: Make async
  #+BEGIN_SRC emacs-lisp
    (defun nri/bear ()
      (let ((default-directory (lsp-workspace-root)))(shell-command-to-string "make clean; bear make")))
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
    (use-package fuz
      :config
      (unless (require 'fuz-core nil t)
        (fuz-build-and-load-dymod)))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    ;; deactivated until recentf is still sorted at first
    (use-package ivy-fuz
      :ensure t
      :demand t
      :after ivy
      :custom
      (ivy-sort-matches-functions-alist '((t . ivy-fuz-sort-fn)))
      (ivy-re-builders-alist '((t . ivy-fuz-regex-fuzzy)))
      :config
      (add-to-list 'ivy-highlight-functions-alist '(ivy-fuz-regex-fuzzy . ivy-fuz-highlight-fn)))
  #+END_SRC



** Async Shell Command no popup
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'display-buffer-alist
                  (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
   #+END_SRC

* Auto Save
  TODO: Trigger, when moving around
  #+BEGIN_SRC emacs-lisp
    ;; quiet auto save
    (setq save-silently t)
    (setq auto-save-visited-interval 1.0)
    (auto-save-visited-mode t)
    ;; in insert state -> 5 seconds
    (add-hook 'evil-insert-state-entry-hook
              (lambda () 
                (setq auto-save-visited-interval 5.0)
                (auto-save-visited-mode 1))) ;; mode has to be reloaded
    ;; else 1 second
    (add-hook 'evil-insert-state-exit-hook
              (lambda ()
                (setq auto-save-visited-interval 1.0)
                (auto-save-visited-mode 1)))
  #+END_SRC
* Debugging
  Temporary
  #+BEGIN_SRC emacs-lisp
    (setq gud-gdb-command-name "arm-none-eabi-gdb -i=mi")
    (setq gdb-show-main t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package gdb-mi
      :straight (:host github :repo "weirdNox/emacs-gdb" :files ("*.el" "*.c" "*.h" "Makefile"))
      :init
      (fmakunbound 'gdb)
      (fmakunbound 'gdb-enable-debug)
      :config
      (setq gdb-executable-name "arm-none-eabi-gdb"))
  #+END_SRC
* Autocompletion
** Company Mode
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (add-to-list 'company-frontends 'company-tng-frontend)
       (setq company-minimum-prefix-length 0
             company-idle-delay 0.0
             company-tooltip-limit 14
             company-dabbrev-downcase nil
             company-dabbrev-ignore-case nil
             company-dabbrev-code-other-buffers t
             company-tooltip-align-annotations t
             company-require-match 'never
             company-frontends
             '(company-pseudo-tooltip-frontend
               company-echo-metadata-frontend))
       :general
       (:keymaps 'company-active-map
                  :states '(insert)
                 "<return>" #'company-complete-selection
                 "RET" #'company-complete-selection
                 ;; "TAB"       #'company-select-next
                 "S-TAB"   #'company-select-previous))

   #+END_SRC
** Company Mode Icons
   #+BEGIN_SRC emacs-lisp
     ;; (use-package company-box
     ;; :hook (company-mode . company-box-mode))
   #+END_SRC

** Company Mode Formatting
   #+BEGIN_SRC emacs-lisp
     ;; auto completion
     ;;(custom-set-faces
     ;;'(company-tooltip-common
     ;;  ((t (:inherit company-tooltip :weight bold :underline nil))))
     ;; '(company-tooltip-common-selection
     ;;  ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
     ;;(setq company-tooltip-limit 5
     ;; company-tooltip-align-annotations t
     ;; company-go-show-annotation t
     ;; company-tooltip-minimum 5)
   #+END_SRC

* Test
  
** Dashboard
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)
                              (agenda . 10)))
      (setq dashboard-center-content t)
      (dashboard-setup-startup-hook))
  #+END_SRC

  
** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
    (with-eval-after-load 'treemacs
      (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?)))
  (use-package treemacs-evil)
  (use-package treemacs-projectile)

#+END_SRC

