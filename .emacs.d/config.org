#+TITLE: Configuration
* Applications
** Anki
   Edit Anki Cards in Org-Mode
   https://github.com/louietan/anki-editor
   #+BEGIN_SRC emacs-lisp
     (use-package anki-editor
       :config
       (defun nri/anki-basic () (anki-editor--insert-note-skeleton nil (org-entry-get-with-inheritance anki-editor-prop-deck) "Header" "Basic" '("Front" "Back"))))
   #+END_SRC
** PDF Viewer
   Display PDF Files inside Emacs
   https://github.com/politza/pdf-tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :config
       (pdf-tools-install))

   #+END_SRC
** Ranger
   #+BEGIN_SRC emacs-lisp
     ;; (use-package ranger)
   #+END_SRC
* Completion Framework
  Ivy, Counsel, Swiper
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :config
      (ivy-mode 1)
      (counsel-mode)
      (setq ivy-re-builders-alist
            '((t . ivy--regex-fuzzy))) ;; Fuzzy for everything TODO: not for swiper etc.
      ;; (setq ivy-initial-inputs-alist nil) ;; no ^ at the start
      (define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
      (define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)
      (define-key ivy-minibuffer-map (kbd "C-w") 'backward-kill-word))
  #+END_SRC
* Editing
** Folding
   #+BEGIN_SRC emacs-lisp
(use-package origami)

   #+END_SRC
** Evil
   Vim inside Emacs
*** Evil Mode
    https://github.com/emacs-evil/evil
    #+BEGIN_SRC emacs-lisp
           (use-package evil
             :init
             (setq evil-want-keybinding nil)
             :config
             (evil-mode 1)
             (setq evil-want-C-u-scroll t)) ;; TODO: doesn't work..
    #+END_SRC
*** Evil Surround
    https://github.com/emacs-evil/evil-surround
    #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :after evil
       :config
       (global-evil-surround-mode 1))
    #+END_SRC
*** Evil Collection
    https://github.com/emacs-evil/evil-collection
    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))
    #+END_SRC
*** Evil Nerd Commenter
    https://github.com/redguardtoo/evil-nerd-commenter
    #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter
        :after evil
        :config
        (evilnc-default-hotkeys))
    #+END_SRC
** Parenthesis
   Automatically insert pair of parens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :config
       (smartparens-global-mode 1))
   #+END_SRC
* Org

  #+BEGIN_SRC emacs-lisp
    (use-package org)
  #+END_SRC

** Drag & Drop files to org modes
  #+BEGIN_SRC emacs-lisp
  (use-package org-download)

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    ;; show entities as UTF8 characters
    (setq org-pretty-entities t)

    ;;(setq org-ellipsis " ï„‡ ")

  #+END_SRC

** Latex preview
   #+BEGIN_SRC emacs-lisp
    ;; latex preview larger
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
   #+END_SRC


** Bullets
   Nicer looking bullets
   #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :init
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

   #+END_SRC
** Babel
   #+BEGIN_SRC emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((gnuplot . t)))
;; add additional languages with '((language . t)))
   #+END_SRC
* Keybindings
** Leader Menu
   https://github.com/noctuid/general.el/
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :config
       (general-evil-setup t)
       ;; unset space
       (general-define-key
        :states '(normal visual motion insert emacs)
        :prefix "SPC"
        :non-normal-prefix "M-SPC"
        "SPC" '(counsel-M-x :which-key "commands")

        "TAB" '(mode-line-other-buffer :which-key "previous")

        "'" '(lambda ()(interactive)(ansi-term "/bin/zsh") :which-key "terminal")

        "/" '(swiper :which-key "search")

        "a" '(:ignore t :which-key "Applications")
        "aa" '(:ignore t :which-key "Anki")
        "aai" '(anki-editor-insert-note :which-key "Insert Note")
        "aap" '(anki-editor-push-notes :which-key "Push Notes")

        "b" '(:ignore t :which-key "buffers")
        "bb" '(counsel-ibuffer :which-key "list")

        "c" '(org-latex-export-to-pdf :which-key "Latex PDF")

        "e" '(:ignore t :which-key "emacs")
        "ed" '(:ignore t :which-key "describe")
        "edv" '(describe-variable :which-key "variable")
        "edf" '(describe-function :which-key "function")
        "edk" '(describe-key :which-key "key")
        "edm" '(describe-minor-mode :which-key "minor mode")
        "edM" '(describe-mode :which-key "all modes")

        "ee" '(:ignore t :which-key "eval")
        "eee" '(eval-last-sexp :which-key "expression")
        "eer" '(eval-region :which-key "region")


        "f" '(:ignore t :which-key "file")
        "ff" '(find-file :which-key "find")
        "fg" '(counsel-git :which-key "git")
        "fs" '(save-buffer :which-key "save")
        "fr" '(counsel-recentf :which-key "recent")

        "g" '(:ignore t :which-key "git")
        "gs" '(magit-status :which-key "status")
        "i" '(:ignore t :which-key "insert")
        "ic" '(insert-char :which-key "char")

        "p" '(:ignore t :which-key "projectile")
        "pf" '(projectile-find file :which-key "find file")


        "w" '(:ignore t :which-key "window")
        "wh" '(evil-window-left :which-key "left")
        "wj" '(evil-window-down :which-key "down")
        "wk" '(evil-window-up :which-key "up")
        "wl" '(evil-window-right :which-key "right")
        "wv" '(evil-window-vsplit :w-k "split vertically")
        "ww" '(evil-window-next :w-k "next")
        "wq" '(evil-window-delete :which-key "quit")
        "w=" '(balance-windows :which-key "quit")
       ))

   #+END_SRC
** General

   Number incrementing

   #+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "C-a") 'evil-numbers/inc-at-pt)
;; (global-set-key (kbd "C-x") 'evil-numbers/dec-at-pt)
   #+END_SRC

   Jump forward like vim

   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-i") 'evil-jump-forward)
   #+END_SRC

** Which-Key
   https://github.com/justbur/emacs-which-key
   Which-key shows available keybindings when pressing keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :diminish
       :config
       (setq which-key-separator " ")
       (setq which-key-prefix-prefix "+")
       (setq which-key-idle-delay 0.3)
       (which-key-mode 1))
   #+END_SRC

* Autocompletion
** Company Mode
   #+BEGIN_SRC emacs-lisp
    (use-package company
      :diminish)
   #+END_SRC
** Company Mode Formatting

   #+BEGIN_SRC emacs-lisp
   ;; auto completion
   ;;(custom-set-faces
   ;;'(company-tooltip-common
   ;;  ((t (:inherit company-tooltip :weight bold :underline nil))))
   ;; '(company-tooltip-common-selection
    ;;  ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
   ;;(setq company-tooltip-limit 5
   ;; company-tooltip-align-annotations t
   ;; company-go-show-annotation t
   ;; company-tooltip-minimum 5)
   #+END_SRC
* Misc
** Reload changed files automatically
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
   #+END_SRC
** Seperate Custom File
   This gets rid of the auto generated data that 'custom' saves to the init file
   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (load-file custom-file)
   #+END_SRC
** Save session
   #+BEGIN_SRC emacs-lisp
     ;; (desktop-save-mode 1)
   #+END_SRC
** Quit ediff without prompt
   #+BEGIN_SRC emacs-lisp
     (defun disable-y-or-n-p (orig-fun &rest args)
       (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
         (apply orig-fun args)))
     (advice-add 'ediff-quit :around #'disable-y-or-n-p)
   #+END_SRC

** Kill processes without prompt when quitting
   #+BEGIN_SRC emacs-lisp
     (setq confirm-kill-processes nil)
   #+END_SRC
** No annoying prompts when creating a new file
   #+BEGIN_SRC emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil
   helm-ff-newfile-prompt-p nil
  ido-create-new-buffer 'always)
   #+END_SRC
** y/n is enough
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** UTF-8 Encoding
   #+BEGIN_SRC emacs-lisp
   (setq locale-coding-system 'utf-8) ; pretty
   (set-terminal-coding-system 'utf-8) ; pretty
   (set-keyboard-coding-system 'utf-8) ; pretty
   (set-selection-coding-system 'utf-8) ; please
   (prefer-coding-system 'utf-8) ; with sugar on top
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** Unique buffer names when same file names
   #+BEGIN_SRC emacs-lisp
   (setq uniquify-buffer-name-style 'forward)
   #+END_SRC
** Recent files
   #+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
   #+END_SRC
** Disable lock files
   #+BEGIN_SRC emacs-lisp
     (setq create-lockfiles nil)
   #+END_SRC
** Higher GC treshold
   Allow 20MB before calling the garbage collection. Default ist 0.8MB.
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+END_SRC
** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Single Space after periods
   #+BEGIN_SRC emacs-lisp
     (setq sentence-end-double-space nil)
   #+END_SRC
** Always end with a new line
   #+BEGIN_SRC emacs-lisp
     (setq require-final-newline t)
   #+END_SRC
** No Backup Files (~)
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil) ;; TODO only in git?
   #+END_SRC
** No auto-save files (##)
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil) ;; TODO only in git?
   #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish
    :init (global-flycheck-mode))
  #+END_SRC
* EditorConfig
  #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :diminish
       :config
       (editorconfig-mode 1))
  #+END_SRC
* Git
** Magit
   https://github.com/magit/magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
** Start commit message in insert mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'git-commit-mode-hook 'evil-insert-state)
   #+END_SRC

* Unfinished
** E-Mail
** Mode line

   format git status

   #+BEGIN_SRC emacs-lisp
 ;; (defadvice vc-mode-line (after strip-backend () activate)
 ;;   (when (stringp vc-mode)
 ;;     (let ((noback (replace-regexp-in-string
 ;;                    (format "^ %s" (vc-backend buffer-file-name))
 ;;                    " " vc-mode)))
 ;;       (setq vc-mode noback))))        ;
   #+END_SRC
** Terminal

   - make URLs clickable
   #+BEGIN_SRC emacs-lisp
     (add-hook 'term-mode-hook
               (lambda ()
                 (goto-address-mode)))
   #+END_SRC

* UI
** Font
   #+BEGIN_SRC emacs-lisp
   (set-frame-font "Source Code Pro-13" nil t)
   #+END_SRC

** Theme
   doom
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes)

   #+END_SRC
   Poet
   #+BEGIN_SRC emacs-lisp
(use-package poet-theme)

   #+END_SRC
   Spacemacs Theme
   #+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
:defer t
:init
(load-theme 'spacemacs-dark t ))

   #+END_SRC
   solarized-theme https://github.com/bbatsov/solarized-emacs
   #+BEGIN_SRC emacs-lisp
     (use-package solarized-theme
       :defer 10
       :init
       (setq solarized-use-variable-pitch nil))
     ;; (load-theme 'solarized-dark)
   #+END_SRC
** Misc
*** relative line numbers
    #+BEGIN_SRC emacs-lisp
     (setq display-line-numbers 'relative)
     (global-display-line-numbers-mode)
    #+END_SRC
*** visual stuff
    #+BEGIN_SRC emacs-lisp
     (setq line-spacing 0.1)
     (setq left-margin-width 2)
     (setq right-margin-width 2)

     ;; Turn off the blinking cursor
     (blink-cursor-mode -1)
    #+END_SRC
*** Show matching parens
    #+BEGIN_SRC emacs-lisp
     (setq show-paren-delay 0)
     (show-paren-mode 1)
    #+END_SRC
*** show eldoc near point
    buggy, doesn't display current arguments
    disabled for now

    #+BEGIN_SRC emacs-lisp
     ;;     (defun nri/eldoc-display-near-point (format-string &rest args)
     ;;      "Display eldoc message near point."
     ;;      (when format-string
     ;;        (pos-tip-show (apply 'format format-string args) nil nil nil)))
     ;; (setq eldoc-message-function #'nri/eldoc-display-near-point)
    #+END_SRC

*** transparency
    #+BEGIN_SRC emacs-lisp

;(set-frame-parameter (selected-frame) 'alpha '(85 50))
;(add-to-list 'default-frame-alist '(alpha 85 50))
    #+END_SRC
** Scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-step 1
           scroll-conservatively 10000)

   #+END_SRC
** Mode Line
*** Diminish
    [[https://github.com/myrjola/diminish.el][Diminish]] hides modes in the mode line
    #+BEGIN_SRC emacs-lisp
     (use-package diminish)
    #+END_SRC
**** Diminish Undo-Tree
     #+BEGIN_SRC emacs-lisp
       (diminish 'undo-tree-mode)
     #+END_SRC
**** Diminish Auto-Revert
     #+BEGIN_SRC emacs-lisp
     (diminish 'auto-revert-mode)
     #+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :diminish
      :config
      (setq projectile-completion-system 'ivy))

  #+END_SRC
* Markdown

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode)
  #+END_SRC
* Languages
** Emacs Lisp
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
